;# -*- coding: utf-8 -*-
"""DOC2TEXT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKvacpxxrm054kcmTZ6uv3AHr843yicf
"""

!pip install pdf2image
!pip install pytesseract
!pip install pillow
!pip install re
!pip install json
!pip install spellchecker
!pip install fuzzywuzzy
!pip install python-Levenshtein
!sudo apt install poppler-utils
!pip install pyspellchecker
!sudo apt install tesseract-ocr
!sudo apt install libtesseract-dev
!sudo apt install tesseract-ocr
!sudo apt install libtesseract-dev
!sudo apt install tesseract-ocr-ara

from pdf2image import convert_from_path
import pytesseract
from PIL import Image
import re
import json
from spellchecker import SpellChecker
from fuzzywuzzy import process

pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
custom_config = r'-l ara'
spell_checker = SpellChecker(language='ar')

def arabic_numerals(text):
    """Convert English numerals to Arabic numerals."""
    numeral_mapping = str.maketrans('0123456789', '٠١٢٣٤٥٦٧٨٩')
    return text.translate(numeral_mapping)

def extract_text_from_pdf(pdf_path, output_filename):
    """Extracts text from a PDF file and saves it in a structured, formatted JSON file."""
    ## Convert PDF to images
    images = convert_from_path(pdf_path)
    text_content = []

    for image in images:
        text = pytesseract.image_to_string(image, config=custom_config)
        enhanced_text = enhance_text_format(text)
        text_content.append(enhanced_text)

    full_text = "\n\n".join(text_content)
    save_to_json(full_text, output_filename)

def enhance_text_format(text):
    """Enhances text formatting by cleaning and segmenting sentences into paragraphs."""
    # Remove unwanted characters and reduce multiple spaces/newlines
    text = re.sub(r'[^\u0600-\u06FF0-9\s]', '', text)
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()

    text = arabic_numerals(text)

    # SEGMENTATION
    sentences = re.split(r'(?<=[.!؟])\s+', text)
    paragraphs = "\n".join(sentences)

    return paragraphs.strip()

def correct_text_errors(text):
    """Corrects common OCR errors in Arabic text using spell checking and fuzzy matching."""
    words = text.split()
    corrected_words = []

    for word in words:
        if not spell_checker.unknown([word]):
            corrected_words.append(word)
        else:
            closest_match = spell_checker.candidates(word)
            if closest_match:
                best_match = process.extractOne(word, closest_match)
                corrected_words.append(best_match[0])
            else:
                corrected_words.append(word)

    return ' '.join(corrected_words)

def save_to_json(text, filename):
    """Saves the extracted text in a structured format."""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump({"extracted_text": text}, f, ensure_ascii=False, indent=4)
    print(f"File saved as {filename}")

def download_file(filename):
    from google.colab import files
    files.download(filename)

pdf_path = input("Enter the path to the source PDF: ")
output_filename = input("Enter the desired name for the extracted text file (e.g., 'Chapter5_Lesson2.json'): ")
extract_text_from_pdf(pdf_path, output_filename)
download_file(output_filename)